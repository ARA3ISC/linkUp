services:

  user_database:
    image: postgres:latest
    container_name: user_database
    volumes:
      - ./user_database/:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: user_db
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: user_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_db -d user_db"]
      interval: 10s
      timeout: 15s
      retries: 1000000
    ports:
      - "5432:5432"
    networks:
      - mynetwork
    restart: always

  token_database:
    image: postgres:latest
    container_name: token_database
    volumes:
      - ./token_database/:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: token_db
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: token_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U token_db -d token_db"]
      interval: 10s
      timeout: 15s
      retries: 1000000
    ports:
      - "5433:5432"
    networks:
      - mynetwork
    restart: always

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: always
    depends_on:
      - user_database
      # - token_database
    ports:
      - "8080:8080"
    networks:
      - mynetwork

  user_service:
    build: ./backend/user/
    image: auth
    container_name: auth
    ports:
      - "8000:8000"
    volumes:
      - ./backend/user:/user/
    depends_on:
      user_database:
        condition: service_healthy
    # env_file:
    #   - .env
    networks:
      - mynetwork
    restart: always
  
  token_service:
    build: ./backend/Token/
    image: token
    container_name: token
    ports:
      - "8001:8001"
    volumes:
      - ./backend/Token:/Token/
    depends_on:
      token_database:
        condition: service_healthy
    # env_file:
    #   - .env
    networks:
      - mynetwork
    restart: always


networks:
  mynetwork:
    driver: bridge